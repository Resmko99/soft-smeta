Index: lib/untitled.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/material.dart';\r\nimport 'package:go_router/go_router.dart';\r\n\r\nvoid main() {\r\n  runApp(const MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  const MyApp({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp.router(\r\n      title: 'Smeta Demo',\r\n      debugShowCheckedModeBanner: false,\r\n      routerConfig: _router,\r\n    );\r\n  }\r\n}\r\n\r\nfinal GoRouter _router = GoRouter(\r\n  initialLocation: '/login',\r\n  routes: [\r\n    GoRoute(\r\n      path: '/login',\r\n      builder: (context, state) => const LoginScreen(),\r\n    ),\r\n    GoRoute(\r\n      path: '/home',\r\n      builder: (context, state) => const HomeScreen(),\r\n    ),\r\n    GoRoute(\r\n      path: '/registration',\r\n      builder: (context, state) => const RegistrationScreen(),\r\n    ),\r\n    GoRoute(\r\n      path: '/reset-password',\r\n      builder: (context, state) => const ResetPasswordScreen(),\r\n    ),\r\n    GoRoute(\r\n      path: '/projects',\r\n      builder: (context, state) => const CreateProjectScreen(),\r\n    ),\r\n    GoRoute(\r\n      path: '/work-reference',\r\n      builder: (context, state) => const WorkReferenceScreen(),\r\n    ),\r\n    GoRoute(\r\n      path: '/template-estimate',\r\n      builder: (context, state) => const TemplateEstimateScreen(),\r\n    ),\r\n  ],\r\n);\r\n\r\nclass LoginScreen extends StatefulWidget {\r\n  const LoginScreen({super.key});\r\n\r\n  @override\r\n  State<LoginScreen> createState() => _LoginScreenState();\r\n}\r\n\r\nclass _LoginScreenState extends State<LoginScreen> {\r\n  final TextEditingController emailController = TextEditingController();\r\n  final TextEditingController passwordController = TextEditingController();\r\n\r\n  void _login() async {\r\n    if (emailController.text.isNotEmpty && passwordController.text.isNotEmpty) {\r\n      await Future.delayed(const Duration(seconds: 2));\r\n      if (mounted) {\r\n        context.go('/home');\r\n      }\r\n    } else {\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        const SnackBar(content: Text('Введите логин и пароль')),\r\n      );\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      body: Center(\r\n        child: Container(\r\n          width: 300,\r\n          padding: const EdgeInsets.all(20),\r\n          decoration: BoxDecoration(\r\n            color: const Color(0xFFF0F0F0),\r\n            borderRadius: BorderRadius.circular(10),\r\n          ),\r\n          child: Column(\r\n            mainAxisSize: MainAxisSize.min,\r\n            children: [\r\n              const Text('Login', style: TextStyle(fontSize: 20)),\r\n              const SizedBox(height: 16),\r\n              TextField(\r\n                controller: emailController,\r\n                decoration: const InputDecoration(\r\n                  border: OutlineInputBorder(),\r\n                  labelText: 'login/email',\r\n                ),\r\n              ),\r\n              const SizedBox(height: 12),\r\n              TextField(\r\n                controller: passwordController,\r\n                obscureText: true,\r\n                decoration: const InputDecoration(\r\n                  border: OutlineInputBorder(),\r\n                  labelText: 'password',\r\n                ),\r\n              ),\r\n              const SizedBox(height: 16),\r\n              ElevatedButton(\r\n                onPressed: _login,\r\n                child: const Text('Войти'),\r\n              ),\r\n              TextButton(\r\n                onPressed: () => context.go('/registration'),\r\n                child: const Text('Зарегистрироваться'),\r\n              ),\r\n              TextButton(\r\n                onPressed: () => context.go('/reset-password'),\r\n                child: const Text('Забыли пароль'),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass RegistrationScreen extends StatefulWidget {\r\n  const RegistrationScreen({super.key});\r\n\r\n  @override\r\n  State<RegistrationScreen> createState() => _RegistrationScreenState();\r\n}\r\n\r\nclass _RegistrationScreenState extends State<RegistrationScreen> {\r\n  final TextEditingController emailController = TextEditingController();\r\n  final TextEditingController passwordController = TextEditingController();\r\n  final TextEditingController confirmPasswordController = TextEditingController();\r\n\r\n  void _register() async {\r\n    if (emailController.text.isNotEmpty &&\r\n        passwordController.text.isNotEmpty &&\r\n        confirmPasswordController.text.isNotEmpty) {\r\n      if (passwordController.text != confirmPasswordController.text) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(content: Text('Пароли не совпадают')),\r\n        );\r\n        return;\r\n      }\r\n\r\n      await Future.delayed(const Duration(seconds: 2));\r\n      if (mounted) {\r\n        context.go('/login');\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(content: Text('Регистрация успешна!')),\r\n        );\r\n      }\r\n    } else {\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        const SnackBar(content: Text('Заполните все поля')),\r\n      );\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      body: Center(\r\n        child: Container(\r\n          width: 300,\r\n          padding: const EdgeInsets.all(20),\r\n          decoration: BoxDecoration(\r\n            color: const Color(0xFFF0F0F0),\r\n            borderRadius: BorderRadius.circular(10),\r\n          ),\r\n          child: Column(\r\n            mainAxisSize: MainAxisSize.min,\r\n            children: [\r\n              const Text('Регистрация', style: TextStyle(fontSize: 20)),\r\n              const SizedBox(height: 16),\r\n              TextField(\r\n                controller: emailController,\r\n                decoration: const InputDecoration(\r\n                  border: OutlineInputBorder(),\r\n                  labelText: 'Email',\r\n                ),\r\n              ),\r\n              const SizedBox(height: 12),\r\n              TextField(\r\n                controller: passwordController,\r\n                obscureText: true,\r\n                decoration: const InputDecoration(\r\n                  border: OutlineInputBorder(),\r\n                  labelText: 'Пароль',\r\n                ),\r\n              ),\r\n              const SizedBox(height: 12),\r\n              TextField(\r\n                controller: confirmPasswordController,\r\n                obscureText: true,\r\n                decoration: const InputDecoration(\r\n                  border: OutlineInputBorder(),\r\n                  labelText: 'Подтвердите пароль',\r\n                ),\r\n              ),\r\n              const SizedBox(height: 16),\r\n              ElevatedButton(\r\n                onPressed: _register,\r\n                child: const Text('Зарегистрироваться'),\r\n              ),\r\n              TextButton(\r\n                onPressed: () => context.go('/login'),\r\n                child: const Text('Назад к входу'),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass ResetPasswordScreen extends StatefulWidget {\r\n  const ResetPasswordScreen({super.key});\r\n\r\n  @override\r\n  State<ResetPasswordScreen> createState() => _ResetPasswordScreenState();\r\n}\r\n\r\nclass _ResetPasswordScreenState extends State<ResetPasswordScreen> {\r\n  final TextEditingController emailController = TextEditingController();\r\n\r\n  void _resetPassword() async {\r\n    if (emailController.text.isNotEmpty) {\r\n      await Future.delayed(const Duration(seconds: 2));\r\n      if (mounted) {\r\n        context.go('/login');\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(content: Text('Инструкции отправлены на почту')),\r\n        );\r\n      }\r\n    } else {\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        const SnackBar(content: Text('Введите email')),\r\n      );\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      body: Center(\r\n        child: Container(\r\n          width: 300,\r\n          padding: const EdgeInsets.all(20),\r\n          decoration: BoxDecoration(\r\n            color: const Color(0xFFF0F0F0),\r\n            borderRadius: BorderRadius.circular(10),\r\n          ),\r\n          child: Column(\r\n            mainAxisSize: MainAxisSize.min,\r\n            children: [\r\n              const Text('Сброс пароля', style: TextStyle(fontSize: 20)),\r\n              const SizedBox(height: 16),\r\n              TextField(\r\n                controller: emailController,\r\n                decoration: const InputDecoration(\r\n                  border: OutlineInputBorder(),\r\n                  labelText: 'Email',\r\n                ),\r\n              ),\r\n              const SizedBox(height: 16),\r\n              ElevatedButton(\r\n                onPressed: _resetPassword,\r\n                child: const Text('Отправить'),\r\n              ),\r\n              TextButton(\r\n                onPressed: () => context.go('/login'),\r\n                child: const Text('Назад к входу'),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass HomeScreen extends StatelessWidget {\r\n  const HomeScreen({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      body: Column(\r\n        crossAxisAlignment: CrossAxisAlignment.stretch,\r\n        children: [\r\n          Container(\r\n            color: const Color(0xFFFF9800),\r\n            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n            child: Row(\r\n              children: [\r\n                const CircleAvatar(\r\n                  backgroundColor: Colors.white,\r\n                  radius: 20,\r\n                ),\r\n                const SizedBox(width: 16),\r\n                Expanded(\r\n                  child: Center(\r\n                    child: Wrap(\r\n                      alignment: WrapAlignment.center,\r\n                      spacing: 10,\r\n                      children: [\r\n                        _HeaderButton(\r\n                          text: 'Создать проект',\r\n                          onTap: () => context.go('/projects'),\r\n                        ),\r\n                        _HeaderButton(\r\n                          text: 'Таблица / Таблица смет',\r\n                          onTap: () {}, // Пока не реализовано\r\n                        ),\r\n                        _HeaderButton(\r\n                          text: 'Справочник работ',\r\n                          onTap: () => context.go('/work-reference'),\r\n                        ),\r\n                        _HeaderButton(\r\n                          text: 'Справочник шаблонов смет',\r\n                          onTap: () => context.go('/template-estimate'),\r\n                        ),\r\n                        _HeaderButton(\r\n                          text: 'История изменений',\r\n                          onTap: () {}, // Пока не реализовано\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n          Expanded(\r\n            child: Center(\r\n              child: Text(\r\n                'Синаптик',\r\n                style: Theme.of(context).textTheme.headlineMedium?.copyWith(\r\n                  color: Colors.black87,\r\n                  fontWeight: FontWeight.bold,\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass CreateProjectScreen extends StatefulWidget {\r\n  const CreateProjectScreen({super.key});\r\n\r\n  @override\r\n  State<CreateProjectScreen> createState() => _CreateProjectScreenState();\r\n}\r\n\r\nclass _CreateProjectScreenState extends State<CreateProjectScreen> {\r\n  // Каждый проект — Map с полями 'name' и 'modules' (список модулей)\r\n  final List<Map<String, dynamic>> projects = [];\r\n  final TextEditingController projectController = TextEditingController();\r\n  int? selectedProjectIndex;\r\n\r\n  // Заглушки доступных модулей\r\n  final List<Map<String, dynamic>> availableModules = [\r\n    {'name': 'Модуль авторизации', 'requiredTime': 10},\r\n    {'name': 'Модуль формирования доски', 'requiredTime': 20},\r\n    {'name': 'Модуль оплаты', 'requiredTime': 15},\r\n    {'name': 'Модуль подсчёта голосов', 'requiredTime': 12},\r\n  ];\r\n\r\n  // Создать новый проект — добавляем новый элемент с пустым списком модулей\r\n  void _createProject() {\r\n    setState(() {\r\n      projects.add({\r\n        'name': 'Новый проект',\r\n        'modules': <Map<String, dynamic>>[],\r\n      });\r\n      selectedProjectIndex = projects.length - 1;\r\n      projectController.text = 'Новый проект';\r\n    });\r\n  }\r\n\r\n  // При нажатии на элемент списка проектов делаем его выбранным и отображаем его данные\r\n  void _selectProject(int index) {\r\n    setState(() {\r\n      selectedProjectIndex = index;\r\n      projectController.text = projects[index]['name'];\r\n    });\r\n  }\r\n\r\n  // Сохранить изменения выбранного проекта (обновляем его имя)\r\n  void _saveProject() {\r\n    if (selectedProjectIndex != null && projectController.text.isNotEmpty) {\r\n      setState(() {\r\n        projects[selectedProjectIndex!]['name'] = projectController.text;\r\n      });\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        const SnackBar(content: Text('Проект сохранён')),\r\n      );\r\n    } else {\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        const SnackBar(content: Text('Выберите проект и введите его название')),\r\n      );\r\n    }\r\n  }\r\n\r\n  // Добавляем модуль в выбранный проект\r\n  void _addModule(Map<String, dynamic> module) {\r\n    if (selectedProjectIndex == null) {\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        const SnackBar(content: Text('Сначала создайте или выберите проект')),\r\n      );\r\n      return;\r\n    }\r\n    setState(() {\r\n      // Добавляем копию модуля в список модулей выбранного проекта\r\n      (projects[selectedProjectIndex!]['modules'] as List)\r\n          .add(Map<String, dynamic>.from(module));\r\n    });\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(\r\n          content: Text(\r\n              'Модуль \"${module['name']}\" добавлен в проект \"${projects[selectedProjectIndex!]['name']}\"')),\r\n    );\r\n  }\r\n\r\n  // Подсчитываем итоговое время для выбранного проекта\r\n  int get _totalRequiredTime {\r\n    if (selectedProjectIndex == null) return 0;\r\n    final modules = projects[selectedProjectIndex!]['modules'] as List;\r\n    int total = 0;\r\n    for (var mod in modules) {\r\n      total += mod['requiredTime'] as int;\r\n    }\r\n    return total;\r\n  }\r\n\r\n  // Кнопка возврата на главный экран\r\n  void _goBack() {\r\n    context.go('/home');\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Создание проекта'),\r\n        backgroundColor: const Color(0xFFFF9800),\r\n        centerTitle: true,\r\n        leading: const CircleAvatar(\r\n          backgroundColor: Colors.white,\r\n          radius: 20,\r\n        ),\r\n        actions: [\r\n          IconButton(\r\n            icon: const Icon(Icons.arrow_back),\r\n            onPressed: _goBack,\r\n          ),\r\n        ],\r\n      ),\r\n      body: Column(\r\n        children: [\r\n          // Постоянная верхняя панель с кнопками (side-bar)\r\n          Container(\r\n            color: const Color(0xFFFF9800),\r\n            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n            child: Row(\r\n              mainAxisAlignment: MainAxisAlignment.center,\r\n              children: [\r\n                _HeaderButton(\r\n                  text: 'Создать проект',\r\n                  onTap: _createProject,\r\n                ),\r\n                _HeaderButton(\r\n                  text: 'Сохранить',\r\n                  onTap: _saveProject,\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n          Expanded(\r\n            child: Row(\r\n              children: [\r\n                // Левая панель – список проектов и данные выбранного проекта\r\n                Expanded(\r\n                  child: Container(\r\n                    padding: const EdgeInsets.all(16),\r\n                    color: Colors.grey[200],\r\n                    child: Column(\r\n                      crossAxisAlignment: CrossAxisAlignment.start,\r\n                      children: [\r\n                        const Text(\r\n                          'Список проектов:',\r\n                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\r\n                        ),\r\n                        Expanded(\r\n                          child: ListView.builder(\r\n                            itemCount: projects.length,\r\n                            itemBuilder: (context, index) {\r\n                              return GestureDetector(\r\n                                onTap: () => _selectProject(index),\r\n                                child: Container(\r\n                                  color: selectedProjectIndex == index\r\n                                      ? Colors.blue.withOpacity(0.3)\r\n                                      : Colors.transparent,\r\n                                  child: ListTile(\r\n                                    title: Text(projects[index]['name']),\r\n                                  ),\r\n                                ),\r\n                              );\r\n                            },\r\n                          ),\r\n                        ),\r\n                        const SizedBox(height: 16),\r\n                        // Если проект выбран, отображаем его данные\r\n                        if (selectedProjectIndex != null) ...[\r\n                          TextField(\r\n                            controller: projectController,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Название проекта',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          const Text(\r\n                            'Модули проекта:',\r\n                            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\r\n                          ),\r\n                          Expanded(\r\n                            child: ListView.builder(\r\n                              itemCount: (projects[selectedProjectIndex!]['modules'] as List).length,\r\n                              itemBuilder: (context, index) {\r\n                                final mod = (projects[selectedProjectIndex!]['modules'] as List)[index];\r\n                                return ListTile(\r\n                                  title: Text(mod['name']),\r\n                                  subtitle: Text('Время: ${mod['requiredTime']} ч'),\r\n                                );\r\n                              },\r\n                            ),\r\n                          ),\r\n                          Container(\r\n                            padding: const EdgeInsets.all(8),\r\n                            color: Colors.white,\r\n                            child: Text(\r\n                              'Итоговое время: $_totalRequiredTime ч',\r\n                              style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\r\n                            ),\r\n                          ),\r\n                        ]\r\n                      ],\r\n                    ),\r\n                  ),\r\n                ),\r\n                // Правая панель – выбор модуля (заглушка)\r\n                Expanded(\r\n                  child: Container(\r\n                    padding: const EdgeInsets.all(16),\r\n                    color: Colors.white,\r\n                    child: Column(\r\n                      crossAxisAlignment: CrossAxisAlignment.start,\r\n                      children: [\r\n                        const Text(\r\n                          'Доступные модули:',\r\n                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\r\n                        ),\r\n                        Expanded(\r\n                          child: ListView.builder(\r\n                            itemCount: availableModules.length,\r\n                            itemBuilder: (context, index) {\r\n                              final module = availableModules[index];\r\n                              return ListTile(\r\n                                title: Text(module['name']),\r\n                                subtitle: Text('Необходимое время: ${module['requiredTime']} ч'),\r\n                                trailing: GestureDetector(\r\n                                  onTap: () => _addModule(module),\r\n                                  child: const CircleAvatar(\r\n                                    backgroundColor: Colors.red,\r\n                                    radius: 10,\r\n                                  ),\r\n                                ),\r\n                              );\r\n                            },\r\n                          ),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass WorkReferenceScreen extends StatefulWidget {\r\n  const WorkReferenceScreen({super.key});\r\n\r\n  @override\r\n  State<WorkReferenceScreen> createState() => _WorkReferenceScreenState();\r\n}\r\n\r\nclass _WorkReferenceScreenState extends State<WorkReferenceScreen> {\r\n  final List<Map<String, dynamic>> works = [];\r\n  final TextEditingController workNameController = TextEditingController();\r\n  final TextEditingController requiredTimeController = TextEditingController();\r\n  final TextEditingController costController = TextEditingController();\r\n  final TextEditingController laborController = TextEditingController();\r\n  int? selectedWorkIndex;\r\n  String selectedSpecialist = 'AN';\r\n  double customerTime = 0;\r\n\r\n  // Список специалистов\r\n  final List<Map<String, String>> specialists = [\r\n    {'code': 'AN', 'name': 'Аналитика'},\r\n    {'code': 'DE', 'name': 'Дизайн'},\r\n    {'code': 'MD', 'name': 'Мобильная разработка'},\r\n    {'code': 'BE', 'name': 'Back-end разработка'},\r\n    {'code': 'FE', 'name': 'Frontend разработка'},\r\n    {'code': 'DO', 'name': 'DevOPS'},\r\n    {'code': 'QA', 'name': 'Тестирование'},\r\n    {'code': 'PM', 'name': 'Менеджмент'},\r\n  ];\r\n\r\n  // Выбираем работу из списка\r\n  void _selectWork(int index) {\r\n    setState(() {\r\n      selectedWorkIndex = index;\r\n      workNameController.text = works[index]['name'];\r\n      requiredTimeController.text = works[index]['requiredTime'].toString();\r\n      selectedSpecialist = works[index]['specialist'];\r\n      costController.text = works[index]['cost'].toString();\r\n      laborController.text = works[index]['labor'].toString();\r\n      customerTime = works[index]['requiredTime'] * 2;\r\n    });\r\n  }\r\n\r\n  // Сохранить изменения или добавить новую работу\r\n  void _saveWork() {\r\n    if (workNameController.text.isEmpty ||\r\n        requiredTimeController.text.isEmpty ||\r\n        costController.text.isEmpty ||\r\n        laborController.text.isEmpty) {\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        const SnackBar(content: Text('Заполните все поля')),\r\n      );\r\n      return;\r\n    }\r\n\r\n    final newWork = {\r\n      'name': workNameController.text,\r\n      'requiredTime': double.parse(requiredTimeController.text),\r\n      'specialist': selectedSpecialist,\r\n      'customerTime': customerTime,\r\n      'cost': double.parse(costController.text),\r\n      'labor': double.parse(laborController.text),\r\n    };\r\n\r\n    setState(() {\r\n      if (selectedWorkIndex == null) {\r\n        works.add(newWork);\r\n      } else {\r\n        works[selectedWorkIndex!] = newWork;\r\n      }\r\n      _clearFields();\r\n    });\r\n\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(\r\n          content: Text('Работа \"${newWork['name']}\" успешно сохранена')),\r\n    );\r\n  }\r\n\r\n  // Очистка полей после сохранения или отмены\r\n  void _clearFields() {\r\n    workNameController.clear();\r\n    requiredTimeController.clear();\r\n    costController.clear();\r\n    laborController.clear();\r\n    selectedSpecialist = 'AN';\r\n    customerTime = 0;\r\n    selectedWorkIndex = null;\r\n  }\r\n\r\n  // Обновляем время для заказчика при изменении необходимого времени\r\n  void _updateCustomerTime(String value) {\r\n    final requiredTime = double.tryParse(value) ?? 0;\r\n    setState(() {\r\n      customerTime = requiredTime * 2;\r\n    });\r\n  }\r\n\r\n  // Кнопка возврата на главный экран\r\n  void _goBack() {\r\n    context.go('/home');\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Справочник работ'),\r\n        backgroundColor: const Color(0xFFFF9800),\r\n        centerTitle: true,\r\n        leading: const CircleAvatar(\r\n          backgroundColor: Colors.white,\r\n          radius: 20,\r\n        ),\r\n        actions: [\r\n          IconButton(\r\n            icon: const Icon(Icons.arrow_back),\r\n            onPressed: _goBack,\r\n          ),\r\n        ],\r\n      ),\r\n      body: Column(\r\n        children: [\r\n          // Постоянная верхняя панель с кнопками (side-bar)\r\n          Container(\r\n            color: const Color(0xFFFF9800),\r\n            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n            child: Row(\r\n              mainAxisAlignment: MainAxisAlignment.center,\r\n              children: [\r\n                _HeaderButton(\r\n                  text: 'Сохранить работу',\r\n                  onTap: _saveWork,\r\n                ),\r\n                _HeaderButton(\r\n                  text: 'Очистить',\r\n                  onTap: _clearFields,\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n          Expanded(\r\n            child: Row(\r\n              children: [\r\n                // Левая панель – список работ\r\n                Expanded(\r\n                  child: Container(\r\n                    padding: const EdgeInsets.all(16),\r\n                    color: Colors.grey[200],\r\n                    child: Column(\r\n                      crossAxisAlignment: CrossAxisAlignment.start,\r\n                      children: [\r\n                        const Text(\r\n                          'Список работ:',\r\n                          style:\r\n                          TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\r\n                        ),\r\n                        Expanded(\r\n                          child: ListView.builder(\r\n                            itemCount: works.length,\r\n                            itemBuilder: (context, index) {\r\n                              return GestureDetector(\r\n                                onTap: () => _selectWork(index),\r\n                                child: Container(\r\n                                  color: selectedWorkIndex == index\r\n                                      ? Colors.blue.withOpacity(0.3)\r\n                                      : Colors.transparent,\r\n                                  child: ListTile(\r\n                                    title: Text(works[index]['name']),\r\n                                    subtitle: Text(\r\n                                        'Время: ${works[index]['requiredTime']} ч'),\r\n                                  ),\r\n                                ),\r\n                              );\r\n                            },\r\n                          ),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  ),\r\n                ),\r\n                // Правая панель – форма редактирования/добавления работы\r\n                Expanded(\r\n                  child: Padding(\r\n                    padding: const EdgeInsets.all(16),\r\n                    child: SingleChildScrollView(\r\n                      child: Column(\r\n                        crossAxisAlignment: CrossAxisAlignment.start,\r\n                        children: [\r\n                          TextField(\r\n                            controller: workNameController,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Название работы',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          TextField(\r\n                            controller: requiredTimeController,\r\n                            keyboardType: TextInputType.number,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Необходимое время (ч)',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                            onChanged: _updateCustomerTime,\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          InputDecorator(\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Специалист',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                            child: DropdownButtonHideUnderline(\r\n                              child: DropdownButton<String>(\r\n                                value: selectedSpecialist,\r\n                                isExpanded: true,\r\n                                onChanged: (value) {\r\n                                  if (value != null) {\r\n                                    setState(() {\r\n                                      selectedSpecialist = value;\r\n                                    });\r\n                                  }\r\n                                },\r\n                                items: specialists\r\n                                    .map((spec) => DropdownMenuItem(\r\n                                  value: spec['code'],\r\n                                  child:\r\n                                  Text('${spec['code']} — ${spec['name']}'),\r\n                                ))\r\n                                    .toList(),\r\n                              ),\r\n                            ),\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          Container(\r\n                            padding: const EdgeInsets.all(12),\r\n                            decoration: BoxDecoration(\r\n                              border: Border.all(color: Colors.grey),\r\n                              borderRadius: BorderRadius.circular(4),\r\n                            ),\r\n                            child:\r\n                            Text('Время для заказчика: $customerTime ч'),\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          TextField(\r\n                            controller: costController,\r\n                            keyboardType: TextInputType.number,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Стоимость (₽)',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          TextField(\r\n                            controller: laborController,\r\n                            keyboardType: TextInputType.number,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Трудоёмкость',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                          ),\r\n                          const SizedBox(height: 24),\r\n                        ],\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass TemplateEstimateScreen extends StatefulWidget {\r\n  const TemplateEstimateScreen({super.key});\r\n\r\n  @override\r\n  State<TemplateEstimateScreen> createState() => _TemplateEstimateScreenState();\r\n}\r\n\r\nclass _TemplateEstimateScreenState extends State<TemplateEstimateScreen> {\r\n  // Список шаблонов смет. Каждый шаблон — Map с 'name' и списком 'phases'\r\n  final List<Map<String, dynamic>> templates = [\r\n    {\r\n      'name': 'смета VPN',\r\n      'phases': ['Этап 1', 'Этап 2', 'Этап 3'],\r\n    },\r\n    {\r\n      'name': 'смета Личный кабинет ВятГУ',\r\n      'phases': ['Этап 1', 'Этап 2', 'Этап 3'],\r\n    },\r\n    {\r\n      'name': 'смета Браузер',\r\n      'phases': ['Этап 1', 'Этап 2', 'Этап 3'],\r\n    },\r\n    {\r\n      'name': 'смета Car-washing',\r\n      'phases': ['Этап 1', 'Этап 2', 'Этап 3'],\r\n    },\r\n  ];\r\n\r\n  int? selectedTemplateIndex;\r\n  int? selectedPhaseIndex;\r\n\r\n  // Контроллеры для полей формы правой панели\r\n  final TextEditingController phaseNameController = TextEditingController();\r\n  final TextEditingController descriptionController = TextEditingController();\r\n  final TextEditingController devTimeController = TextEditingController(); // время разработки (например, \"3д 2ч\")\r\n  final TextEditingController projectOutcomeController = TextEditingController(); // Итог проекта (разработка *2)\r\n  final TextEditingController laborHoursController = TextEditingController(); // трудоёмкость, ч\r\n  final TextEditingController laborDaysController = TextEditingController(); // трудоёмкость, д\r\n  final TextEditingController costController = TextEditingController();\r\n  final TextEditingController startDateController = TextEditingController();\r\n  final TextEditingController endDateController = TextEditingController();\r\n\r\n  String selectedSpecialist = 'AN';\r\n  final List<Map<String, String>> specialists = [\r\n    {'code': 'AN', 'name': 'Аналитика'},\r\n    {'code': 'DE', 'name': 'Дизайн'},\r\n    {'code': 'MD', 'name': 'Мобильная разработка'},\r\n    {'code': 'BE', 'name': 'Back-end разработка'},\r\n    {'code': 'FE', 'name': 'Frontend разработка'},\r\n    {'code': 'DO', 'name': 'DevOPS'},\r\n    {'code': 'QA', 'name': 'Тестирование'},\r\n    {'code': 'PM', 'name': 'Менеджмент'},\r\n  ];\r\n\r\n  // При выборе шаблона сметы и этапа обновляем поля формы (если ранее были сохранены данные)\r\n  void _selectTemplate(int index) {\r\n    setState(() {\r\n      selectedTemplateIndex = index;\r\n      selectedPhaseIndex = null;\r\n      _clearPhaseFields();\r\n    });\r\n  }\r\n\r\n  void _selectPhase(int index) {\r\n    setState(() {\r\n      selectedPhaseIndex = index;\r\n      // Если в будущем храним данные для этапа, их можно подгрузить здесь.\r\n      // Пока просто заполняем имя этапа:\r\n      phaseNameController.text =\r\n      templates[selectedTemplateIndex!]['phases'][index];\r\n      // Оставляем остальные поля пустыми для ввода\r\n      descriptionController.clear();\r\n      devTimeController.clear();\r\n      projectOutcomeController.clear();\r\n      laborHoursController.clear();\r\n      laborDaysController.clear();\r\n      costController.clear();\r\n      startDateController.clear();\r\n      endDateController.clear();\r\n      selectedSpecialist = 'AN';\r\n    });\r\n  }\r\n\r\n  // При изменении трудоёмкости (в часах) вычисляем время разработки и итог проекта.\r\n  void _updateTimeCalculations(String value) {\r\n    final laborHours = double.tryParse(value) ?? 0;\r\n    // Пример: 3д 2ч. Допустим, 1 день = 8 часов.\r\n    // Мы можем вычислить дни и остаток часов:\r\n    final days = laborHours ~/ 8;\r\n    final hours = laborHours % 8;\r\n    // Время разработки = введённые часы, преобразованные в формат \"Xd Yh\"\r\n    devTimeController.text = '${days}д ${hours.toInt()}ч';\r\n    // Итог проекта = время разработки * 2 (в днях и часах)\r\n    final totalHours = laborHours * 2;\r\n    final totalDays = totalHours ~/ 8;\r\n    final totalRemainHours = totalHours % 8;\r\n    projectOutcomeController.text = '${totalDays}д ${totalRemainHours.toInt()}ч';\r\n    // Также запишем трудоёмкость в днях\r\n    laborDaysController.text = totalDays.toString();\r\n  }\r\n\r\n  // Очистка полей правой панели\r\n  void _clearPhaseFields() {\r\n    phaseNameController.clear();\r\n    descriptionController.clear();\r\n    devTimeController.clear();\r\n    projectOutcomeController.clear();\r\n    laborHoursController.clear();\r\n    laborDaysController.clear();\r\n    costController.clear();\r\n    startDateController.clear();\r\n    endDateController.clear();\r\n    selectedSpecialist = 'AN';\r\n  }\r\n\r\n  // Функция сохранения этапа (здесь можно добавить логику сохранения в базу)\r\n  void _savePhase() {\r\n    if (phaseNameController.text.isEmpty ||\r\n        descriptionController.text.isEmpty ||\r\n        devTimeController.text.isEmpty ||\r\n        projectOutcomeController.text.isEmpty ||\r\n        laborHoursController.text.isEmpty ||\r\n        costController.text.isEmpty ||\r\n        startDateController.text.isEmpty ||\r\n        endDateController.text.isEmpty) {\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        const SnackBar(content: Text('Заполните все поля этапа')),\r\n      );\r\n      return;\r\n    }\r\n    // Здесь можно сохранить данные этапа в структуру шаблона сметы\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(content: Text('Этап \"${phaseNameController.text}\" сохранён')),\r\n    );\r\n  }\r\n\r\n  // Функция возврата на главный экран\r\n  void _goBack() {\r\n    context.go('/home');\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Справочник шаблонов смет'),\r\n        backgroundColor: const Color(0xFFFF9800),\r\n        centerTitle: true,\r\n        leading: const CircleAvatar(\r\n          backgroundColor: Colors.white,\r\n          radius: 20,\r\n        ),\r\n        actions: [\r\n          IconButton(\r\n            icon: const Icon(Icons.arrow_back),\r\n            onPressed: _goBack,\r\n          ),\r\n        ],\r\n      ),\r\n      body: Column(\r\n        children: [\r\n          // Верхняя панель с кнопками (side-bar)\r\n          Container(\r\n            color: const Color(0xFFFF9800),\r\n            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\r\n            child: Row(\r\n              mainAxisAlignment: MainAxisAlignment.center,\r\n              children: [\r\n                _HeaderButton(\r\n                  text: 'Сохранить этап',\r\n                  onTap: _savePhase,\r\n                ),\r\n                _HeaderButton(\r\n                  text: 'Очистить',\r\n                  onTap: _clearPhaseFields,\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n          Expanded(\r\n            child: Row(\r\n              children: [\r\n                // Левая панель: список шаблонов смет и этапов\r\n                Expanded(\r\n                  child: Container(\r\n                    color: Colors.grey[200],\r\n                    padding: const EdgeInsets.all(16),\r\n                    child: Column(\r\n                      crossAxisAlignment: CrossAxisAlignment.start,\r\n                      children: [\r\n                        const Text(\r\n                          'Шаблоны смет:',\r\n                          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\r\n                        ),\r\n                        Expanded(\r\n                          child: ListView.builder(\r\n                            itemCount: templates.length,\r\n                            itemBuilder: (context, index) {\r\n                              return GestureDetector(\r\n                                onTap: () => _selectTemplate(index),\r\n                                child: Container(\r\n                                  color: selectedTemplateIndex == index\r\n                                      ? Colors.blue.withOpacity(0.3)\r\n                                      : Colors.transparent,\r\n                                  child: ListTile(\r\n                                    title: Text(templates[index]['name']),\r\n                                  ),\r\n                                ),\r\n                              );\r\n                            },\r\n                          ),\r\n                        ),\r\n                        const SizedBox(height: 16),\r\n                        if (selectedTemplateIndex != null) ...[\r\n                          const Text(\r\n                            'Этапы:',\r\n                            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),\r\n                          ),\r\n                          Expanded(\r\n                            child: ListView.builder(\r\n                              itemCount: templates[selectedTemplateIndex!]['phases'].length,\r\n                              itemBuilder: (context, index) {\r\n                                final phase = templates[selectedTemplateIndex!]['phases'][index];\r\n                                return GestureDetector(\r\n                                  onTap: () => _selectPhase(index),\r\n                                  child: Container(\r\n                                    color: selectedPhaseIndex == index\r\n                                        ? Colors.green.withOpacity(0.3)\r\n                                        : Colors.transparent,\r\n                                    child: ListTile(\r\n                                      title: Text(phase),\r\n                                    ),\r\n                                  ),\r\n                                );\r\n                              },\r\n                            ),\r\n                          ),\r\n                        ],\r\n                      ],\r\n                    ),\r\n                  ),\r\n                ),\r\n                // Правая панель: форма редактирования этапа\r\n                Expanded(\r\n                  child: Container(\r\n                    padding: const EdgeInsets.all(16),\r\n                    color: Colors.white,\r\n                    child: SingleChildScrollView(\r\n                      child: Column(\r\n                        crossAxisAlignment: CrossAxisAlignment.start,\r\n                        children: [\r\n                          TextField(\r\n                            controller: phaseNameController,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Название этапа',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          TextField(\r\n                            controller: descriptionController,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Описание',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          TextField(\r\n                            controller: devTimeController,\r\n                            readOnly: true,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Время разработки (рассчитано)',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          TextField(\r\n                            controller: projectOutcomeController,\r\n                            readOnly: true,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Итоги по проекту (х2)',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          InputDecorator(\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Специалисты',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                            child: DropdownButtonHideUnderline(\r\n                              child: DropdownButton<String>(\r\n                                value: selectedSpecialist,\r\n                                isExpanded: true,\r\n                                onChanged: (value) {\r\n                                  if (value != null) {\r\n                                    setState(() {\r\n                                      selectedSpecialist = value;\r\n                                    });\r\n                                  }\r\n                                },\r\n                                items: specialists\r\n                                    .map((spec) => DropdownMenuItem(\r\n                                  value: spec['code'],\r\n                                  child: Text('${spec['code']} — ${spec['name']}'),\r\n                                ))\r\n                                    .toList(),\r\n                              ),\r\n                            ),\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          TextField(\r\n                            controller: laborHoursController,\r\n                            keyboardType: TextInputType.number,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Трудоёмкость, ч',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                            onChanged: _updateTimeCalculations,\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          TextField(\r\n                            controller: laborDaysController,\r\n                            readOnly: true,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Трудоёмкость, д',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          TextField(\r\n                            controller: costController,\r\n                            keyboardType: TextInputType.number,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Стоимость (₽)',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          TextField(\r\n                            controller: startDateController,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Дата начала',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                            onTap: () async {\r\n                              FocusScope.of(context).requestFocus(FocusNode());\r\n                              DateTime? date = await showDatePicker(\r\n                                context: context,\r\n                                initialDate: DateTime.now(),\r\n                                firstDate: DateTime(2000),\r\n                                lastDate: DateTime(2100),\r\n                              );\r\n                              if (date != null) {\r\n                                setState(() {\r\n                                  startDateController.text =\r\n                                  '${date.day}/${date.month}/${date.year}';\r\n                                });\r\n                              }\r\n                            },\r\n                          ),\r\n                          const SizedBox(height: 16),\r\n                          TextField(\r\n                            controller: endDateController,\r\n                            decoration: const InputDecoration(\r\n                              labelText: 'Дата окончания',\r\n                              border: OutlineInputBorder(),\r\n                            ),\r\n                            onTap: () async {\r\n                              FocusScope.of(context).requestFocus(FocusNode());\r\n                              DateTime? date = await showDatePicker(\r\n                                context: context,\r\n                                initialDate: DateTime.now(),\r\n                                firstDate: DateTime(2000),\r\n                                lastDate: DateTime(2100),\r\n                              );\r\n                              if (date != null) {\r\n                                setState(() {\r\n                                  endDateController.text =\r\n                                  '${date.day}/${date.month}/${date.year}';\r\n                                });\r\n                              }\r\n                            },\r\n                          ),\r\n                          const SizedBox(height: 24),\r\n                        ],\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass _HeaderButton extends StatelessWidget {\r\n  final String text;\r\n  final VoidCallback onTap;\r\n\r\n  const _HeaderButton({required this.text, required this.onTap});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return InkWell(\r\n      onTap: onTap,\r\n      child: Container(\r\n        margin: const EdgeInsets.symmetric(horizontal: 8),\r\n        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),\r\n        decoration: BoxDecoration(\r\n          color: Colors.purple[600],\r\n          borderRadius: BorderRadius.circular(4),\r\n        ),\r\n        child: Text(\r\n          text,\r\n          style: const TextStyle(color: Colors.white),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/untitled.dart b/lib/untitled.dart
--- a/lib/untitled.dart	(revision 94f3e733b7cf244ea8b9f3ea22cd57b43cd874c8)
+++ b/lib/untitled.dart	(date 1742800175242)
@@ -1,5 +1,7 @@
 import 'package:flutter/material.dart';
 import 'package:go_router/go_router.dart';
+import 'package:flutter/material.dart';
+import 'package:provider/provider.dart';
 
 void main() {
   runApp(const MyApp());
@@ -1281,6 +1283,46 @@
   }
 }
 
+class HistoryLogger extends ChangeNotifier {
+  final List<String> _logs = [];
+
+  List<String> get logs => _logs;
+
+  void addLog(String action) {
+    final now = DateTime.now();
+    final log = '${now.day}/${now.month}/${now.year} | ${now.hour}:${now.minute}:${now.second} — $action';
+    _logs.insert(0, log);
+    notifyListeners();
+  }
+
+  void clearLogs() {
+    _logs.clear();
+    notifyListeners();
+  }
+}
+
+// Глобальный перехватчик нажатий
+class LogButtonWrapper extends StatelessWidget {
+  final Widget child;
+  const LogButtonWrapper({super.key, required this.child});
+
+  @override
+  Widget build(BuildContext context) {
+    return Listener(
+      onPointerDown: (event) {
+        if (event.kind == PointerDeviceKind.touch || event.kind == PointerDeviceKind.mouse) {
+          final RenderObject? renderObject = context.findRenderObject();
+          if (renderObject is RenderBox) {
+            final Offset position = renderObject.localToGlobal(Offset.zero);
+            context.read<HistoryLogger>().addLog('Нажата кнопка в позиции (${position.dx}, ${position.dy})');
+          }
+        }
+      },
+      child: child,
+    );
+  }
+}
+
 class _HeaderButton extends StatelessWidget {
   final String text;
   final VoidCallback onTap;
